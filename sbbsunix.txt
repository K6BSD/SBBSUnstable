Synchronet for Unix
-=-=-=-=-=-=-=-=-=-

Created: Mar 15, 2002
Updated: Jan 22, 2003

By: Rob Swindell
http://www.synchro.net

$Id$

The information in this file is current as of the "updated" date above. The
answers and instructions in this file may change over time, so be sure to get
the current version of this file at
ftp://vert.synchro.net/Synchronet/sbbsunix.txt
or via CVSweb at
http://cvs.synchro.net/cgi-bin/cvsweb.cgi/~checkout~/docs/sbbsunix.txt

For additional tips on running Synchronet on FreeBSD, see
http://sync.bbsdev.net/tips.html

Answers to Frequently Asked Questions
=====================================

Q. What flavors of Unix (and Unix-like operating systems) are supported?
A. Currently, Linux-x86, FreeBSD-x86, OpenBSD-x86, and Solaris-x86.

Q. What distributions of Linux are supported?
A. Should work with any GNU/Linux-x86 distribution (e.g. RedHat, Mandrake, 
   Debian, Slackware, etc.).

Q. Are non-x86 (Alpha, SPARC, 68k, PowerPC, etc) processors supported?
A. Not currently. Synchronet assumes a little-endian processor. It *may* work
   on other little-endian processors (e.g. Alpha), but hasn't been tested.
   Big-endian support is currently being developed for the v3.20 time-frame.

Q. Will Synchronet ever support big-endian and/or 64-bit processors?
A. Yes, that is the plan.

Q. Where do I get Synchronet for Unix?
A. There are no binary distributions at this time, so you must get the source
   code from the Synchronet CVS repository (cvs.synchro.net).
   See the step-by-step instructions below for details.

Q. Will there be binary releases?
A. Yes, some day soon. Or maybe a binary installer that will come with source
   code and build it for you.

Q. Can I mix Synchronet for Unix and Synchronet for Win32 or DOS or OS/2 nodes
   on the same BBS?
A. Yes. As long as all the nodes can access the same live data files (via LAN)
   you can have as many instances of Synchronet on as many different platforms
   as you wish.

Q. Does Synchronet for Unix support external DOS programs/doors?
A. Currently, only the FreeBSD build has doscmd support "built-in". Other
   platforms can use DOSEMU or whatever is available for running DOS programs.
   There is currently no available documentation for using Synchronet with
   DOSEMU on Linux (or other platforms), but there should be soon.

Q. What external programs/doors does Synchronet for Unix support?
A. External programs can either use standard I/O (e.g. bash, pico, Lord/X,
   PimpWars) or socket I/O (e.g. Synchronet XSDK doors).

Q. Does Synchronet for Unix require X-Windows?
A. No, Synchronet for Unix is currently a console-based application.

Q. Are there any plans to make an X-Windows front-end for Synchronet?
A. Yes, but it will be optional.


Step-by-step Instructions
=========================

Note: These instructions assume you are already logged in as 'root'.

Note: Skip to step 8 if you are updating an existing Synchronet installation.

1. Get the required installation and source code modules from CVS:

   A. Create the Synchronet BBS directory on your file system:
      mkdir /sbbs

   B. Change to this directory:
      cd /sbbs

   *> Optional Shortcut:
   *> At this point you can copy the file from this url: 
   *> http://cvs.synchro.net/cgi-bin/cvsweb.cgi/~checkout~/install/GNUmakefile
   *> into the /sbbs directory, run "gmake install", and then skip ahead to 
   *> step 5.

   C. Get the required installation modules from the CVS repository:
      export CVSROOT=:pserver:anonymous@cvs.synchro.net:/cvsroot/sbbs 
      cvs login
      (no password - just hit enter)
      cvs -z3 co ctrl text exec xtrn node1 node2 node3 node4

   D. Get the required source code modules from the CVS repository:
      cvs -z3 co src/sbbs3 src/uifc src/xpdev src/mozilla

   E. Get the required JavaScript library for your platform and build type:
      cvs -z3 co lib/mozilla/js/linux.debug
      or:
      cvs -z3 co lib/mozilla/js/linux.release
      or:
      cvs -z3 co lib/mozilla/js/freebsd.debug
      etc.

2. Build Synchronet:

   A. Change to this directory:
      cd /sbbs/src/sbbs3

   B. Build the main executable (and utilities):
      gmake
      (please report build errors to rob@synchro.net)
      Note: warnings (if any) can be safely ignored

   C. Change to this directory:
      cd /sbbs/src/sbbs3/scfg

   D. Build the Synchronet configuration utility (SCFG):
      gmake
      (please report build errors to rob@synchro.net)
      Note: warnings (if any) can be safely ignored

   E. Congratulate yourself on a job well-done.


3. Prepare the "exec" directory:

   A. Change to this directory:
      cd /sbbs/exec

   B. Copy (or create symbolic links to) the following files:
      /sbbs/src/sbbs3/gcc.linux.exe.debug/baja
      /sbbs/src/sbbs3/gcc.linux.exe.debug/node
      /sbbs/src/sbbs3/gcc.linux.exe.debug/chksmb
      /sbbs/src/sbbs3/gcc.linux.exe.debug/fixsmb
      /sbbs/src/sbbs3/gcc.linux.exe.debug/makeuser
      /sbbs/src/sbbs3/gcc.linux.exe.debug/addfiles
      /sbbs/src/sbbs3/gcc.linux.exe.debug/filelist
      /sbbs/src/sbbs3/gcc.linux.exe.debug/smbutil
      /sbbs/src/sbbs3/gcc.linux.exe.debug/sbbs
      /sbbs/src/sbbs3/gcc.linux.exe.debug/sbbsecho
      /sbbs/src/sbbs3/gcc.linux.exe.debug/echocfg
      /sbbs/src/sbbs3/scfg/gcc.linux.debug/scfg
      /sbbs/src/sbbs3/scfg/gcc.linux.debug/scfghelp.ixb
      /sbbs/src/sbbs3/scfg/gcc.linux.debug/scfghelp.dat
      (the paths will be different for other platforms or release builds)

   C. Build the required Baja {tm} modules:
      gmake


4. Prepare the "xtrn" directory:

   A. Change to this directory:
      cd /sbbs/xtrn/sbj

   B. Build Synchronet Blackjack:
      gmake

   C. Change to this directory:
      cd /sbbs/xtrn/sbl

   D. Build Synchronet BBS List:
      gmake


5. Configure the BBS:

   A. Run SCFG:
      /sbbs/exec/scfg /sbbs/ctrl
      (if you have problems with the curses interface, try running
       "scfg -d" instead)
      Tip: Set the SBBSCTRL environment variable and you won't have to specify
           the path to the "ctrl" directory on the command-line:
           export SBBSCTRL=/sbbs/ctrl

   B. Change SCFG->Networks->QWK->Hubs->VERT:
      Pack Command Line               zip -j -D %f %s
      Unpack Command Line             unzip -o -j %f %s -d %g
      Call-out Command Line           *qnet-ftp VERT vert.synchro.net YOURPASS
      (see docs/dove-net.txt for more details)


6. Running Synchronet:

   1. Set the SBBSCTRL environment variable to point to your "ctrl" directory:
      export SBBSCTRL=/sbbs/ctrl

   2. Run the main executable (with default settings/options):
      /sbbs/exec/sbbs

   3. To view available command-line options, run:
      /sbbs/exec/sbbs help | more

   4. To view default settings (node and port numbers), run:
      /sbbs/exec/sbbs defaults

   5. To change the default settings, edit the file:
      /sbbs/ctrl/sbbs.ini


7. Debugging:

   A. Run the GNU debugger:
      gdb /sbbs/exec/sbbs

   B. Run Synchronet:
      run

   C. After segfault, display back-trace:
      bt

   D. Copy and paste in e-mail to rob@synchro.net


8. Updating/synchronizing the source code with the CVS repository:

   A. Change to your Synchronet installation directory:
      cd /sbbs

   B. Back-up your working exec directory:
      cp -a exec exec.bak

   C. Get the latest changes from CVS:
      export CVSROOT=:pserver:anonymous@cvs.synchro.net:/cvsroot/sbbs 
      cvs login
      (no password - just hit enter)
      cvs update docs exec src xtrn

   D. Repeat steps 2, 3 and 4 (only).

   E. Shutdown and re-run sbbs.

   F. You're done. :-)


Send comments/questions to rob@synchro.net

/* End of sbbsunix.txt */
